#################### DIA 1
####################
####################
aula linguagens de programacao:
linguagens compiladas (como rust e C) precisam ser compiladas para diferentes plataformas (windows, android, linux, etc). Linguagens interpretadas (como python) geralmente são multiplataformas.

aula como esta organizada a plataforma python
Python Language Reference (PLR) descricao da linguagem em um documento. A partir desse documento foram criadas várias implementacoes (e.g. IronPython, Jython, PyPy, Stackless Python, etc). CPython é a implementação oficial, criada pelo próprio criador da linguagem (Guido). Python Software Foundation (PSF) é uma fundação que protege o uso da marca python, com código de conduta que precisa ser seguido para quem quer usar a "marca", mas python é open source e código aberto. Empresas podem se filiar a PSF e fazer doações para a linguagem crescer, mas não são donas dele.

aula 3
comando: python -m site
mostra onde o python busca os pacotes quando importamos e outras informações que podem ser úteis.

aula 5
starship: plugin para o terminal (nao instalei)
terminator: plugin para terminal (esse eu instalei)
micro: editor de texto (nao instalei)
boas práticas: no começo do script colocar shebang especificando o ambiente e o interpretador (e.g. #!usr/bin/env python3). Para pegar o endereço do pytho: digitar which python
=====> por volta dos 40 minutos da aula, Bruno fala que é bom especificar o ambiente porque o script pode acabar rodando em um lugar diferente. Mas aí se o env não está especificado, o que acontece? O meu ambiente não vai ser reproduzido no outro lugar que o script rodar, vai? O que acontece é que as variáveis de ambiente do local que o script rodar vão ser exportadas e não as minhas.
Colocando a shebang no início do script, dá para rodar ele sem especificar o "python3" no começo: ./script.py (atenção, que o arquivo tem que ter permissão para executar)
Ferramenta que mostra alterações coloridas em arquivos git (git diff): delta

aula 6
guia de estilo python PEP8 (pep8.org)
if __name__ == "__main__"
	funcao
verifica se o comando está sendo rodado em terminal. Se não estiver, o __name__ será diferente.

Aula 10 ambientes virtuais e IPython
=====> cada projeto em um ambiente virutal separado, mas aí eu terei várias bibliotecas iguais repetidas no computador, uma para cada ambiente?
A venv copia as bibliotecas, interpretadores e etc (que podem ser vistos com o comando python -m site para a pasta criada com o comando.
A convencao é chamar a pasta criada com venv de .venv
Para usar a venv, é preciso ativar primeiro, com source .venv/bin/activate
Conferir que estamos no venv: which python
Quando se cria uma venv, é comum fazer o upgrade do python: python -m pip install --upgrade pip 


#################### DIA 2
####################
####################
####################
####################

aula 1 tipo de dados e inteiros
Um objeto tem: 1. um endereço na memória, acessado com id(objeto).
2. Um tipo, classe, acessado com type(objeto)
3. Um valor em binário (bin (objeto)) e o valor que usamos
Em binário, o número 65 tem o mesmo valor da letra "A", mas através do TIPO do objeto o computador (python) conseque saber o que queremos.
"através do tipo que transformamos dado em informação".

Dados primários (ou scalar types):

--int (para ver "protocolos" dos objetos, chamar dir(objeto), e.g. dir(int))
	int__add__(1) mesma coisa que int + 1
	int__gt__(X) mesma coisa que comparacao int > X
	int__eq__(Y) mesma coisa que comparacao int == Y

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 2 tipos float, bool NoneType
float.__add__(3.5 , 1) mesma coisa que 3.5 + 1
Para valores monetários na "vida real" não usar float e sim "Decima", "Currency", porque a precisão de float não é adequada para esses casos.
Qualquer valor numerico > 0 é True.
NoneType só tem um valor: None. E.g. nome = None (a variável exite, mas fica sem valor).
Singleton = objetos que só podem ser criado s uma vez durante a execução do código. None é um objeto singleton.
Range em python é não inclusivo, então precisa ser o valor final + 1.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 3 textos caracteres encoding e strings
A informática começou com a tabela ASCII, mas ela não comportava muito caracteres. Então a utf8 foi criada e ela consegue armazenar os caracteres de todas as línguas e ainda outros, como emojis.
Caso se queira trabalhar com uma tecnologia que não aceite utf8, mas os dados contenham simbolos / caracteres em utf8, é preciso fazer a serialização.
A serialização transforma em representação em texto um símbolo utf8 por exemplo com hexadecimal.
Para isso existe a funcao objeto.encode("utf-8"). Ela transforma o simbolo em uma representacao que so tenha caracteres da tabela ASCII. Para fazer o caminho reverso, se usa o comando objeto.decode().
exemplo: cobra= b'\xf0\x9f\x90\x8d' (o b é de "binário")
		 decoded= cobra.decode()
		 decoded.encode("utf-8")

Para ver a representacao em bytes de uma str, pode usar bytes(str), e.g. bytes("thiago","utf-8). E usando list(bytes("thiago","utf-8")), uma lista com a representacao em bytes da str é gerada.
nome=list(bytes("THIAGO", "utf-8"))
[chr(i) for i in nome]
Qualquer objeto que tenha __iter__ entre os métodos é iterável (aceita "for").
nome= "Thiago"
iterador= nome.__iter__()
next(iterador)

Objetos iteraveis podem ser mostrados com uma lista. E.g. reversed("thiago")
list(reversed(thiago))

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 4 formatacao de textos

#concatenação:
nome = "thiago"
profissao= "biologia"
gosto= "programacao"
formatura= 2010
nome + " é formado em " + profissao + " e gosta de " + gosto + ". Se formou em " + str(formatura)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

#interpolação:
template= "%s é formado em %s e gosta de %s. Se formou em %d"
template % (nome, profissao, gosto, formatura)
"Olá, %s" % "thiago"
"%s é formado em %s e gosta de %s. Se formou em %d" % (nome, profissao, gosto, formatura)

numero= 2.5
"cinco dividido por 2 é %f" % numero
"cinco dividido por 2 é %.2f" % numero ## para diminuir as casas deicmais

numero= 1
"primeiro é %d" % numero
"primeiro é %03d" % numero ## formatando numero de zeros a esquerda

Para muitos valores para interpolar, dicionários podem ser usados ao invés dos parênteses e os objetos podem ser nomeados:
"%(nome)s é formado em %(profissao)s e gosta de %(gosto)s. Se formou em %(formatura)d" % {"nome" : nome, "profissao" : profissao, "gosto" : gosto, "formatura" : formatura}

Outro exemplo:
nomes= ["Dayane", "Thiago"]
profissao= ["historia", "biologia"]
for nome in range(len(nomes)):
	print("%(pessoa)s é formado(a) em: %(formacao)s" % {"pessoa" : nomes[nome], "formacao" : profissao[nome]})


#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
# format string

nomes= ["Dayane", "Thiago"]
profissao= ["historia", "biologia"]
tempo= [4, 10]
for nome in range(len(nomes)):
	msg= "{} é formado(a) em: {} e tem {:02d} anos de estudo" 
	print(msg.format(nomes[nome], profissao[nome], tempo[nome]))

for nome in range(len(nomes)):
	msg= "{nome} é formado(a) em: {prof} e tem {tempo:02d} anos de estudo" 
	print(msg.format(nome= nomes[nome], prof= profissao[nome], tempo= tempo[nome]))


## formatando o texto na tela (centralizando, deixando a esquerda, etc)
"{:^20}".format("thiago")
"{:<20}".format("thiago")
"{:>20}".format("thiago")
"{:-^20}".format("thiago")
"{:*^20}".format("thiago")
"{:~^20}".format("thiago")
"{:^20.3}".format("thiago")
"{:.^20.3}".format("thiago") ## essas coisas funcionam para numeros tambem

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
# f-strings
# o que foi mostrado acima de formatação (centralizao e etc) continua funcionando
nomes= ["Dayane", "Thiago"]


profissao= ["historia", "biologia"]
for nome in range(len(nomes)):
	print(f"{nomes[nome]} é formado(a) em: {profissao[nome]}")

nomes= ["Dayane", "Thiago"]
profissao= ["historia", "biologia"]
tempo= [4, 10]
for nome in range(len(nomes)):
	print(f"{nomes[nome]} é formado(a) em: {profissao[nome]} e tem {tempo[nome]:02d} anos de estudo") 

### para imprimir emojis:
## é só colocar o prefixo "\U000" mais o código unicode de algum emoji
print("\U0001F43C")

## outro jeito é substituir o \U000 por \N{nome do emoji}, os nomes são padronizados em tabela unicode.
## \N vem de "nome"
print("\N{panda face}")
print("\N{ant}")

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 5 tipos compostos e dados
1. tuple
tuplas são acessadas pelo índice.
tuplas são iteráveis.
tuplas são imutáveis, não tem como alterar (adicionar ou remover elementos).

variavel= "thiago", 1988, 3.5, True, None
# ou
variavel= ("thiago", 1988, 3.5, True, None)
dir(type(variavel))
dados.count("thiago")
dados.count("joana")
dados[-1]

desempacotamento de tuplas:
variavel= ("thiago", 1988, "biologo")
nome= variavel[0]
ano= variavel[1]
profissao= variavel[2]
# mesma coisa que:
nome, ano, profissao =variavel
# para pegar apenas um elemento
nome,*resto=variavel

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 6 listas 
listas são comparáveis (apesar de não ser exatamente iguais) a arrays e vetores em outras linguagens.

#criar lista vazia
variaveis= [] ## maneira preferível e mais comum de fazer ("maneira literal")
variaveis= list()

#listas podem ser criadas vazias porque são objetos mutáveis
variaveis.append("thiago") ## append vai sempre para o final
variaveis.insert(0, "outra pessoa") ## insere a variáveil na posição X
variaveis.remove("outra pessoa") ## remove elemento da lista
# listas também aceitam desempacotamento
variaveis=["thiago",1988,"Biologo"]
nome,ano,profissao=variaveis
#listas (assim como tuplas), são adicionáveis:
variaveis2= ["paula","milene"]
variaveis + variaveis2
#para atualizar uma lista juntando outra lista, existe por exemplo o metodo extend
variaveis
variaveis.extend(variaveis2)
#caso uma lista tenha algum valore repetido e se use o metodo .remove, a primeira ocorrencia e removida
variaveis.append("thiago"  )
variaveis.count("thiago")
variaveis.remove("thiago")
variaveis.count("thiago")
#tanto tuplas quanto listas tem o método .__contains__
variaveis.__contains__("thiago") # que é a mesma coisa que:
"thiago" in variaveis

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 7 exercicio listas, tuplas, loops e condicionais
arquivo escola.py

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 8 sets e a teoria dos conjuntos

# set = conjunto

c1={1,2,3} # facilmente confundida com dicionario ou tupla
type(c1)

# jeito preferencial:
c1=set(1,2,3)
c1=set([1,2,3])

dri(set)

# sets nao aceitam repeticao
# set é um jeito de removaer duplicados de listas, é só colocar ela em um set
c1= set("banana")
c1

c1= [1,2,3,4,5]
c2= [3,4,5,6,7]

## união entre conjuntos
c3= set(c1) | set(c2)
c3= set(c1).union(c2)
c3= set(c1 + c2)

## intersecao entre conjuntos
c3= set(c1).intersection(set(c2))
c3= set(c1) & set(c2)

## diferenca entre conjuntos
c3= set(c1) - set(c2) ## o que está no conjunto 1 e não está no 2
c3= set(c1).difference(set(c2)) ## o que estão no conjunto 1 e não está no 2

c4= set(c2) - set(c1) ## o que está no conjunto 2 e não está no 1
c3= set(c2).difference(set(c1)) ## o que está no conjunto 2 e não está no 1

## diferença simétrica 
# elementos que estão só no conjunto 1 e elementos que estão só no 2

c3= set(c1).symmetric_difference(set(c2))
c3= set(c1) ^ set(c2)

# set aceitam que elementos sejam colocados:
c1= set()
c1.add(1)
c1.add(2)
c1.add(3)

c1.add(1)
c1.add(1)
c1.add(1)
c1.add(1)
c1.add(1) ### sets só aceitam elementos únicos, então esses outros valores não serão adicionados a ele

## sets aceitam hash table
# exemplo:

numeros= [1,2,4,5,3,2,5,6,7,3,5,6,7,4]
1 in numeros
8 in numeros
6 in numeros ## dessa maneira, a comparacao é feita elemento a elemento e caso existam muitos elementos, a performance fica ruim.
# notação: O(n) ("big O", depende do número de elementos)

## se a mesma operação for feita em um set, primeiramente os duplicados
## já são removidos e a Hash table ainda armazena um "mapa" de onde estão os elementos. Isso faz com que a notação "big O" seja 1: O(1), independe do tamanho do set e as buscas em objetos grandes são muito mais rápidas.

numeros= set([1,2,4,5,3,2,5,6,7,3,5,6,7,4])
1 in numeros
8 in numeros

## Quando não usar set. Valores duplicados, ordens não são mantidas e sets não aceitam fatiamento (e.g. numeros[0])

### exercicio: escola_v1_set.py 

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 9 dicionários
Em tuple, list, ser e str, apenas 1 valor é armazenado em cada posição
Dicionário é como se fosse a união entre list e set:
	São mutáveis
	São iteráveis
	Implementam as hash tables (o que torna as buscas muito mais rápidas e estão implementadas nos sets)
	Não aceitam key / chaves duplicadas (como no set)
	Guardam 2 informações por posição (key/chave : value/valor)

#criacao:
obj= {key : value} ## aceita número como key, sets podem ser criados com set={valor1, valor2}, a diferença para o dict é que no dict tem ":" ao invés de vírgula
obj= dict(key= value) ## nessa forma parece não aceitar número como key. Skey fica sem aspas, value com aspas se for chr, se número, sem aspas

obj= {"nome" : "thiago", "profissao" : "biologo", "nascimento" : 1988}
len(obj) ## conta o número de keys
del(obj["key"]) ## delete o key
nome in obj ## procura pela key no dicionário, usando a hashtable
## caso se queira prourar pelo valor, não é tão simples e tão rápido
## teria que ser feito por comparação (e.g. for x in dict)

obj.keys()
obj.values()

for i,key in enumerate(obj.keys()):
	print(i,key)
	print(obj.get(key))


obj.items() ## mostra key : value no formato de tupla
for i,key in enumerate(obj.items()):
	print(i, key)

obj.update({"hobby" : "programacao"}) ## adicionar key em dicionario
obj["planta"]= "Mabea fistulifera" ## adicionar key a dicionario
extra= {"bicho" : "Oxytrigona tataira"}
novoDict= {**obj, **extra} ## criando um novo dicionário que é a junção de outros
## o desempacotamento de dicionários, como em {**obj, **extra} é parecido com outros, como com o de listas [*ls, *ls2], mas tem dois asteriscos porque o desempacotamento é de 2 elementos por posição, em lista é 1 asterisco porque é com 1 elemento por posição.

### para printar coisas complexas (como dicionários) no terminal:
import ppaarint
pprint.pprint(novoDict)

## com dicionários o método dict.get retorna objeto None caso a chave não exista, é possível colocar um valor default para ser retornado:
novoDict.get("cidade")
novoDict.get("cidade", "brasilia")
## caso se procure pelo key usando a notação [] e o key não exista, o python retorna um erro
novoDict["cidade"]

## dicionários são muito usados no python. A classe int é um dicionário
int.__dict__
## existe um dicionário de funções (builtin) no python, que são armazenadas com nome da funcao : funcao:
__builtins__.__dict__
__builtins__.__dict__["print"]("hello")

## exercicio: escola_v1_dict.py

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

DIA 3

aula 1 Standard Input & Output e argumentos do CLI

#bios: Basic Input Output System. Principal tarefa: inicializar os componentes do sistema e inicia o boot.
#CPU carrega o SO do HD para a memória RAM. CPU então avisa o STDOUT. Cada programa tem um shell (espaço isolado) e um STDOUT, que pode se comunicar com um monitor, um alto falante e etc.
#No modulo sys permite interagir com componentes do sistema.

import sys
sys.platform ## ver qual o sistema operacional
dir(sys)
sys.stdout ## mostra o que está no stdout. Espera receber texto (type sys.stdout)
sys.stdout.write("Hello World") ## ele retorna o texto e quantos caracteres tem no que foi passado. O comando print por padrão "printa" usa o sys.stdout, uma "abstração".

print? #digitar no ipython
# manipular o que o print usa (ao invés do sys.stdout) para colocar em um arquivo .txt:
print("salvar no arquivo pelo print", file=open("stdout.txt","a")) ## vai salvar no diretório ao invés de "printar" na tela.
## o que é colocado no print está no modo append ("a") e o linux tem um comando que fica escutando e lendo um arquivo (abrir o ipython em um terminal para mandar os prints e rodar o comando do linux em outro):
tail -f stdout.txt
print("ouvindo", file=open("stdout.txt","a"))
print("continua ouvindo", file=open("stdout.txt","a"))

stdin: pega informações do stdout.
sys.stdin ## ao invés do método write, tem o método read
# assim como o print é abstração do sys.stdout, o sis.stdin tem uma abstração: a função input
nome= input("Qual o seu nome?") ## digitar resposta
nome ## a resposta será salva na variável caso tenha sido atribuida.
## o comando input serve para caso em que haja interação com usuário, ser for para ler inforações vindas de outras fontes, existem outras funções.
## input só sabe ler TEXTO.

## CLI args (command line arguments) são uma forma de ler inputs de usuários

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 2 manipulando arquivos e pastas

linux
. = diretório atual
.. = diretório anterior
touch = arquivos vazios
echo "linha" >> caminho do arquivo.txt = adicionar linha em arquivo txt

# no python, para ter métodos de sistema de arquivos

import os

os.listdir(".") ## arquivos e pastas do diretório atual
os.mkdir("pasta/subpasta") ## cria pasta, se alguma das pastas existir, o comando dá erro
os.makedirs("pasta/subpasta",exist_ok=TRUE) ## ignora o erro se a pasta já existir. Ele faz com que, caso a pasta exista, nada aconteça, se não existir, seja criada
os.path.join("pasta", "subpasta") ## é recomendado para criar caminhos, porque windows e sistemas unix usam barras diferentes para acessar os arquivos. Ela reconhece o separador de pastas automaticamente
os.curdir ## é recomendado ao invés de os.listdir(".") porque o sistema operacional pode usar outro símbolo para o diretório corrente (pwd) e essa função resolve isso automaticamente.
os.mknod(os.path.join(path,"nome do arquivo.txt")) ## cria um arquivo no diretório selecionado


os.mknod(os.path.join(os.curdir,"arquivo.txt")) ## criando o arquivo para exemplo da aula.

path= os.curdir ## boa prática ter variáveis para cmainho da pasta e caminho do arquivo
filepath= os.path.join(os.curdir,"arquivo.txt") ## boa prática ter variáveis para cmainho da pasta e caminho do arquivo
pathCompleto= os.path.abspath(filepath) ## pego o caminho absoluto

## para colocar coisas dentro do arquivo criado, é preciso criar um "file descriptor":

open(pathCompleto) ## por padrão abre no modo leitura ("mode= r")

arquivo= open(pathCompleto) ## coloco numa variável e posso interagir com ela

arquivo.read() ## ainda está vazio

arquivo.write() ## se tento adicionar algo com o objeto no modo leitura, dá erro

arquivo= open(pathCompleto, "w") ## abrindo no modo escrita
arquivo.write("thiago\n") ## adicionando linha com quebra no final para não juntar as linhas em um única string
arquivo.close() ## fechando o arquivo depois de escrever. Obrigatório fazer isso para evitar problemas
arquivo.read()
arquivo= open(pathCompleto, "r") ## abrindo o arquivo novamente em modo leitura
arquivo.read() ## verificando o conteúdo
arquivo.read() ## segunda vez abrindo o arquivo em modo leitura dá resultado vazio, mas não é bug. A função consome o conteúdo do arquivo para ser possível voltar de onde algum comando parou. Uma das formas de contornar iso é abrir o arquivo novamente no modo leitura.

## IMPORTANTE: toda vez que abrimos um arquivo no modo "w",  conteúdo é todo subtituido.
# se não quier substituir, abrir no modo "a" (append):
arquivo= open(pathCompleto, "a")
arquivo.write("R B M")
arquivo.close()
open(pathCompleto).read()
print(open(pathCompleto).read())

### no modo descrito acima é sempre necessário usar o arquivo.clode()
### com o context manager isso é resolvido

with open(pathCompleto, "a") as arquivo:
	## with cria um objeto "especial" em alguns casos
	arquivo.write("context manager\n")
	arquivo.write("hello world\n")
	## quando saímos desse bloo de código o arquivo é fechado automaticamente
print(open(pathCompleto).read())

## uma forma prática de adicionar linha a um arquivo é usando o print (e nesse caso a quebra de linha é adicionada automaticamente):
print("adicionado com print", file=open(pathCompleto, "a"))

## caso for passar uma lista para um arquivo, uma opção é com o context manager fazer um loop linha a linha, mas existe a funcao arquivo.writelines:
lista= ["abelha\n",
		"planta\n",
		"caracol\n"]
filepath= os.path.join(os.curdir,"lista.txt")

with open(filepath,"a") as arquivo:
	arquivo.writelines(lista)

print(open(filepath).read())
open(filepath).readlines() ## ler linha a linha do arquivo em uma lista

### o python 3 tem outra biblioteca para manipular essas funcoes
### essa biblioteca é mais próxima da orientação a objetos

from pathlib import Path
Path("pasta") ## retorna um objeto PosixPath
Path("pasta") / Path("subpasta") ## substitui o os.path.join e lida com o problma das barras de windows ou unix automaticamente. A barra separando os objetos é a mesma independendo do SO. 
path= (Path("/home/thiagorbm/Documents/Python/linuxtips/python-base") /
Path("pasta")).mkdir() ## criando uma pasta (de nome "pasta") juntando dois Paths
filepath= Path(pathCompleto)
filepath.write_text("linha filepath lib")
filepath.read_text() ## sobrescreveu (usou "write")

## o iterador (for line in open(filepath):....) lê os arquivos linha a linha e isso permite que arquivos muito grandes sejam lidos sem estourar a memoria do computador

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 3 tratamentos de erros com exceptions

traceback informa que aconteceu um erro na chamada mais recente. Não é bom deixar isso chegar a quem usa o programa porque pode até indicar falha de segurança ou expor variáveis que não é bom mostrar.

No python existem duas formas de lidar com erros:
	1. LBYL (Look Before You Leap): verificar antes de tentar fazer algo. ## import os
## os.path.exists("caminho/aquivo") ## verificar se o arquivo existe.
	LBYL tem temp ode execução variável e se o processamento estiver muito carregado, pode demorar um tempo para ser executado. 
	RACE CONDITION pode ser um problema se dois programas acessarem o mesmo arquivo ao mesmo tempo (por exemplo apaga um arquivo que é usado por outro). Esse problema pode ser perigoso se usado por exemplo em bancos de dados. LBYL não é a melhor forma de tratar erros.

	2. EAFP (Easy To Ask Forgiveness than Permission): primeiro faz as coisas e depois trata os erros. Tem menos verificações e complexidade algoritmica menor. Ao invés de colocar if para testar tudo, usar try e except.
	try:
		ação # podem ser feitas várias coisas dentro de um mesmo bloco try
	except: ## bare except
		print("mensagem...")
		sys.exit(1)

	## Bare except coleta qualquer erro. Se alguma ação dentro do bloco try der errado, o bare except vai informar a mesma coisa. Os erros devem ser pensados individualmente. Para isso, o except deve especificar os tipos de erros que podem ocorrer em um bloco try. O python tem diversos tipos de erros por padrão (exmplo, FileNotFoundError, ZeroDivisionError, AttributeError)

	try:
		ação 1
		ação 2
		ação 3
	except FileNotFoundError:
		print("[erro] arquivo não encontrado")
		sys.exit(1)
	except ZeroDivisionError:
		print("[erro] divisão por zero")
		sys.exit(2)
	except AttributeError:
		print("[erro] objeto não tem o atributo X")

	### o erro pode ser capturado em um objeto e fica mais fácil mostrar qual foi ele

# criar arquivo com nomes (zsh) e apagar
echo "thiago" >> names.txt && echo "maria" >> names.txt && echo "joao" >> names.txt
rm names.txt

#no python:

	try:
		names=open("names.txt").readlines()
	except FileNotFoundError as e: ## é possível colocar várias exceções no mesmo except entre parêneteses. Não necessariamente é necessário printar algo. Outras ações podem ser feitas dentro da exception (como retry). No bloco try ainda pode ser usado finally após o retry. Ele executa independente de haver erro (else pode ser usado e só executa caso não haja erro)
		print(f"{str(e)}")
		sys.exit(1)

# após o try é possível "estourar" (raise) erros específicos (disponíveis no python por padrão) ou criados por nós:

	vars(__builtins__) ## para ver os erros

	try:
		raise RunTimeError("Ocorreu um erro") ## erro geral
	except Exception as e:
		print(str(e))
		
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 4 gravando logs

Geralmente são guardados logs dos programas para ter um suporte bom.
Além da stdout e stdin, existe uma outra interface, chamada stderr.
É uma interface virtual para ond vão os erros. O que é impresso no stout (tela principal do usuário) são mensagens para humanos lerem.
Mensagens de log (debugging, auditoria, erros, etc) são mandadas para o stderr. As mensagens do stderr podem ser redirecionadas para outros lugares.No LINUX, pode ser usado o comando 2&> para redirecionaro stderr gerado por um programa para um arquivo. No python existe uma biblioteca que facilita o que fazer com as mensagens de erro:

import logging

#logging # root logger (objeto com vários métodos)

logging.critical("deu problema geral")
logging.error(dru problema geral) # mostra na tela, erro padrão

## ao trabalhar com logs nao usar f strings. Se usa a interpolação ("mensagem %s", str(variavel))

## os logging tem níveis (level). 
	0 = NOTSET (nao tem), 
	10 = DEBUG (mostra só para programadores), 
	INFO = 20 (informacoes uteis independente de publico), 
	WARNING = 30 (informacoes para informar algo ao usuario, como alguma coisa que mudou, mas nao necessariamente significa erro)
	ERROR = 40 (erro causado pelo usuário)
	CRITICAL = 50 (erro que afetou todos os usuário)

logging.debug("mensagem pro dev") # nao aparece para o usuario
logging.info("mensagem geral para usuarios") # nao aparece para o usuario
logging.warning("aviso que nao causa erro")
logging.error("erro do usuario")
logging.critical("afeta todos os usuarios")

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 5 exercício algoritmos (sem cóidgo, apenas exemplo)


aula 6 condicionais ternárias e inlines

Truthy e Falsy:
Alguns objetos não booleanos tem métodos que os permitem ser avaliados como True or False (exemplo, objetos vazios como lista False, objetos com conteúdo, como listas, True).

if []:
	print("of")

if [1,2,3]:
	print("ok")

## forma ternária: expressar uma condicional em uma única linha:
n1=1
n2=9
if n2 > n1:
	## forma normal
	valor= "ok"

valor= "ok" if n2 > n1 else "nok" ## forma ternária, precisa do valor default (else)

print("ok" if n2 > n1 else "nok") ## a ternária não precisa ser usada só com atribuições

help("symbols")
help("**=")

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 7 repeticoes com for e while

# "lista materializada" ocupa espaço do tamanho dela na memória. Ocupam muito espaço (quanto mais elementos, mais espaço na memória porque os elementos são armazenados)
# listas materializadas podem ser substituídas por objetos geradores.

lista= [1,2,3,4,5,6] # lista materializada
lista= range(1,7) # objeto gerador (no range, adicionar mais 1 valor ao fim, é não inclusivo). No caso do range, apenas 3 elementos são armazenados: start, next e stop, independente da quantidade de iterações nele.

dentro de loops podem existir as palavras chaves:
	continue # quando chega nela a iteração volta para o começo ou vai para a próxima linha do código
	break # quando chega nela o loop terminal

Em caso de while loops, tomar cuidado para não criar um loop infinito.

 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################
 #######################################################################

 aula 8 exercícios iteracoes, textos, inputs, arquivos

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

DIA 4

aula 1 Funcoes uteis embutidas no Python - builtin

type(sum) ## builtin function
id(sum) ## as funcoes tem uma id para serem acessadas
sum? ## ver o help da funcao
sum.__ ## e apertar tab, ver métodos que existem na funcao as vezes não é possível ver porque podem ter sido escritas em C (as builtin)

import os
os.getenv.__code__ ## mostra um objeto que armazena o codigo da funcao compitaldo

## funcoes no python sao objetos (assim como int, chr e etc)
valor = os.getenv
valor("LANG")
valor.__code__ ## o objeto valor rescebeu os atributos da os.getenv
type(valor)

# "no python funcoes sao cidadaos de primeira classe": funcoes podem ser usadas como qualquer outro objeto.
# podem ser colocadas dentro de dicionarios, colocadas dentro de outras funcoes e etc.

dicS= {'sum':sum}
dicS['sum']
dicS

## dentro do python temos duas categorias de funcao:
# builtin = funcoes que ja carregam com o pytho (e.g. print, open)
# stdlib = funcoes que vem com o python mas precisam ser importadas (e.g. os, sys)

####################### funcoes builtin

numeros=[1,2,3,4,5]
sum(numeros)
max(numeros)
min(numeros)
len(numeros) # emojis podem ocupar mais de 1 espaço e atrapalhar o len
reversed(numeros) # retorna um iterador que reverte

for i in reversed(numeros):
	print(i)

list(reversed(numeros))
tuple(reversed(numeros))

sorted(numeros)
sorted("Banana") ## sorted funciona com letras (maiusculas e minusculas)

## funcoes para do paradigma funcional

texto= "thiago20biologo01brasilia88"
numeros=""
for letra in texto:
## maneira normal (procedural ou imperativa)
	if letra.isdigit():
		numeros=numeros+letra

filter(str.isdigit,texto) ## retorna objeto filter, que é um iterável e pode ser convertido em lista
list(filter(str.isdigit,texto))
"".join(list(filter(str.isdigit,texto)))

## filter compara cada elemento do objeto e compara com uma condicao e retorna o que for True. Entao o numero de elementos pode ser menor do que a a quantidade inicial.

list(filter(str.islower,"Thiago"))

## no map recebemos o objeto de volta

nomes=["fulano","ciclano"]
up=[]
for nome in nomes:
	up.append(nome.upper())

map(str.upper,nomes) # retorna um objeto iteravel
list(map(str.upper,nomes))

numeros=([5,2,3,1,4],[1,2,3],[5,5,6])
list(map(sum,numeros))

all([1,True,False]) ## retorna True se TODOS os elementos sao True
all([]) ## all de uma lista vazia é True

any([1,True,False]) ## retorna True se PELO MENOS UM elemento é True
any([]) ## any de lita vazia é False

nomes=["fulano", "ciclano", "beltrano"]
for nome in nomes:
## pode dar erra caso haja elementos repetidos
	print(nomes.index(nome),nome)

list(enumerate(nomes))

for index,nome in enumerate(nomes):
	print(index,nome)

for index,nome in enumerate(nomes,start=2):
	print(index,nome)

colunas= ["nome", "sobrenome"]
nomes= ["fulano","silva"] 

zip(colunas,nomes) ## retorna um objeto tipo zip (iteravel). 
## zip junta duas listas

list(zip(colunas,nomes))
dict(zip(colunas,nomes))['sobrenome']
colunas=["nome","sobrenome"]
dados=(["fulano","silva"],["ciclano","gomes"],["beltrano","sousa"])

for dado in dados:
	print(dict(zip(colunas,dado)))

[dict(zip(colunas,dado)) for dado in dados]

dir(__builtin__)
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 2

####################### funcoes biblioteca padrao

help("modules")
import random
random.random()
random. # + tab
## quando os objetos de uma funcao sao MAIUSCULAS: em geral sao constantes. Quando a PRIMEIRA LETRA é maiúscula, geralmente é uma classe. Quando tem parênteses, é uma função (um objeto "callable"). Se minúscula sem parênteses é só um objeto mesmo.

random.randint(1,10)

cores=["red","green","blue"]
random.choice(cores) ## pegar um valor aleatório dentro de uma lista
random.sample(cores,2) ## sorteia X valores de uma lista ou EMBARALHA a lista caso o numero de valores sorteados seja igual ao numero de valores nela
random.sample(cores,len(cores))
random.shuffle(cores) ## shuffle altera A PROPRIA LISTA INICIAL

import itertools
itertools. # + tab

import itertools as it
it. # + tab

it.cycle("ABCD") ## "gerador de informação"
for index,item in enumerate(it.cycle("ABCD")):
	print(item) ## loop infinito
	if index > 10:
		break

it.repeat("thiago",10) ## pode ser colocado uma FUNCAO para repetir
list(it.repeat("thiago",10))

numeros= [1,2,3,4,5]
it.accumulate(numeros)
list(it.accumulate(numeros)) ## retorna as somas progressivas
sum(numeros) # retorna apenas o resultado final

it.product("ABC",repeat=2) ## gera combinacoes
list(it.product("ABC",repeat=2))

it.permutations("ABC") ## gera as permutacoes possiveis
list(it.permutations("ABC"))

it.combinations("ABC") ## gera as combinacoes possiveis
list(it.combinations("ABC"))

it.groupby? # no ipython

import functools as ft
myprint=ft.partial(print,sep="---") ## cria uma funcao parcial em cima de outra funcao, preenchendo argumentos da funcao por "padrao" na nova funcao
print("thiago","aaa", sep="---")
myprint("thiago","aaa") ## com myprint nao preciso colocar sempre o sep no print

import statistics as st
numbers= [1,2,2,5,10,12]
st.mean(numbers)
st.median(numbers)

import uuid # Universal Unique ID

uuid. # + tab existe vários, geralmente se usa o 4
uuid.uuid4() ## codigo em hash cada bloco vai ter um significado

import getpass

getpass. # + tab

senha= getpass.getpass("Digite a senha") ## nao aparece a senha no terminal mas NAO ENCRIPTA A SENHA

## bilioteca smtplib é usada para enviar emails. Ela usa o protocolo smtp (procurar pelo protocolo smtpfc).
## Esse protocolo requer algumas chaves para funcionar:

mensagem= """ From: email@server.com
To: destino@server.com, outro@serve.com
Subject: Assunto do email

mensagem para ser enviada
""" ## outros dados podem ser colocados, mas esses são os nec3ssários
Ver arquivo smtp.py

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 3 primeira funcao

No python é bom que o nome das funcoes sigam a guia de estilo (PEP8)
Lowercase nas palavras e underline para separar palavras
Domínio = argumentos
Contradomínio = resultado
Toda funcao de python tem retorno. Se não for especificado, retorna None
Se a funcao nao tiver argumentos: assinatura vazia

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 4 Anatomia de uma funcao

def funcao ### definicao ou atribuicao de funcao
## tudo o que estiver entre a definicao e os dois pontos, é a ATRIBUICAO da funcao
## pode ou nao receber parâmetros.
## documentacao ou doc string fica dentro da funcao, entre aspas triplas:
""" doc string """ e descreve o que a funcao faz

## A partir do python 3.3 tem como colocar as anotações de tipo na assinatura
## da funcao ao inves de descrever na docstring (type hints):

def funcao(a: int, b: int, c: int) -> int:

## funcoes precisam de valor de retorno, se nao ela retornará None
## no ipython, quando rodamos um script com "python3 -i script.py", ele
## entra no modo interativo. Ele roda até o final do script e os objetos criados
## continuam após o término e podem ser usados para outras coisas.

## no python ou ipython, com help(nome da funcao), o nome da funcao, a assinatura e a 
## docstring são impressas no terminal.
## quando rodada no ipython, funcao.__doc__ mostra a docstring da funcao.
## o "help()" usa o __doc__ e formata.
## funcao.__code__ mostra o codigo compilado e outras informacoes
## funcao.__annotations__ mostra as anotacoes do tipo.

## OBS: parâmetros são na DEFINIÇÃO da funcao e parâmetro quando recebem os valores

## existem formas de passar parâmetros para funcoes.
	## 1. uma delas é a posicional. É a mais comum quando a funcao tem poucos 
	## argumentos

	## 2. argumentos nomeados. Não dependem da posição. Garantem que não vai
	## ter problema de inverter parâmetros.

	## 3. passagem de argumentos mista. Os argumentos não nomeados serão 
	## interpretados de acordo com sua posição e virão antes dos nomeados.

## tem como fazer restriçoes no tipo de argumentos quando se cria funcoes.

## as funcoes pode retornar um elemento ou um objeto com múltiplos elementos
## no formato de tupla. Essa tupla pode ser desempacotada direto, na hora de 
## nomear o resultado da funcao (da forma usual que ele é feito).

## é possivel passar argumentos com desempacotamento também, com asterisco
## funcao(*argumentos), de forma posicional para tuplas e NOMEADOS caso
## a mesma coisa seja feita com um dicionario e DOIS asteriscos funcao(**args)

vals=(2,5)
vals1=[2,5]
vals2= {"a":2,"b":5}

def soma(a,b):
	return a + b

soma(vals[0],vals[1])
soma(*vals)
soma(*vals1)
soma(**vals2)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 5 Escopos e argumentos mutáveis e coringas

O próprio NOME de arquivos .py são namespaces e o python aberto no mesmo diretório que um arquivo .py está pode abrir ele com o comando import.
Exemplo:

echo 'nome="thiago"' >> escopo.py  ## no terminal
import escopo ## no python / ipython

type(escopo)
escopo. # tab
escopo.nome ## chama a variável nome

from escopo import nome ## importa um objeto de dentro do namespace
nome

# namespace bulitin carrega junto com o python
# namespace global é tudo o que está no script

echo 'numero = 1' >> escopo.py
echo 'print(globals())' >> escopo.py
## print(globals()) ## mostra todas as variáveis do namespace global. Ele é baseado em dicionário (como todos os objetos no python) e funcoes sao buscadas com base nas hashes do globals()
python3 escopo.py ## rodando o arquivo escopo.py

# No python é possível criar namespaces dentro de namespaces.
# Funcoes tem escopo LOCAL (arquivos.py, escopo GLOBAL). No fim de uma funcao o escopo LOCAL acaba (no escopo GLOBAL, ele termina no fim do arquivo.py). Variáveis criadas dentro do escopo local existem só DENTRO dele por padrão e somem depois da execução (por padrão). Para ver o escopo LOCAL, usar print(locals())

## funcao dentro de funcao pode chamar inner function ou closure. Elas estão dentro do "locals" da funcao que está dentro.
## caso uma variável não existe em uma funcao interna (ou seja, no locals da funcao interna), ele busca no escopo envolvente da funcao que contem a funcao interna.
## para chamar uma variável global para dentro de uma funcao, usar 'global variavel' ou usar globals["variavel"] (esse segundo é o melhor jeito)
## parâmetros de funcao fazem parte do seu escopo local.
## valores defaut de funcao sao atribuidos na assinatura dela.
## funcoes que recebem objetos mutaveis (set, dict, list) precisam de atencao. Objetos mutaveis VAZIOS nos argumentos, resulta em acumulacao.

def adiciona(valor, lista=[])
	lista.append(valor)
	return list

adiciona(4)
adiciona(4)
adiciona(4)
adiciona(4)
adiciona(5)
print(adiciona(6)) ## isso aqui vai retornar uma lista com TODOS os valores adicionados. Se não for para isso acontecer, a lista vazia tem que ser passada em todas as vezes que a funcao for chamada OU, DE PREFERENCIA, ser colocada como None como default e checar se ela foi ou não passada dentro da funcao.

## argumentos coringa em funcoes. Quando nao se sabe quais e nem quantos
## argumentos serao passados. Exemplo de funcao assim é print, que "printa"
## tudo o que for passado (lista, str, int e quantos forem passadas)
## o "coringa" é passado com o asterísco (o padrão é *args).
## vários argumentos são passados e empacotados NA FUNCAO.

def funcao(*args):
	print(args)

### ai com base no que foi recebido, a funcao faz as coisas. Qualquer coisa NAO nomeada que for passada para a funcao sera ingerido.
funcao("thiago",1,True,[])

## para argumentos NOMEADOS, é usado DOIS asteriscos (nome padrao e **kwargs)
def funcao(*args,timeout=10,**kwargs)
funcao("thiago",1,True,[],timeout=90,nome="alfredo",cidade="sao paulo")

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 6 funcoes lambda

# são funcoes EM GERAL não nomeadas (anônimas), de uso único e são passadas para dentro de outras (mas podem ser nomeadas, apesar de não ser considerada uma prática "padrão" / "boa prática").

# palavra chave lambda argumento: acao (pode ter mais de um argumento, nesse caso separado por vírgulas, mas apenas uma ação / expressão)
# funcao lambda nao tem return.


## exemplos (mas elas podem ser usadas em qualquer funcao):

nomes= ['fulano', 'silva', 'joana', 'joao', 'jaqueline']
list(filter(lambda nome: len(nome) == 4,nomes))
list(filter(lambda nome: nome[0] == "j",nomes))
print(sorted(nomes, key= lambda nome: nome.count("o")))
print(list(map(lambda nome: "hello " + nome, nomes)))

(lambda: 1 + 1)()
(lambda a: a + 1)(10)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 7 exercicio com funcoes, recursao e programacao funcional

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 8 Debugging

	Uma forma é executando o script com "python3 (ou ipython) -i script.py": no modo interativo. Alguns frameworks vem com outros paines interativos proprios.
	Usar prints em pontos do script.
	Biblioteca padrao pdb (python debugger): python -m pdb script.py. O script é executado linha a linha e é possível interagir com ele. 

As três acima são "debugging interativo".
Ela não é possível em todos os casos. Nesses casos, é necessário ir até o programa e colocar breakpoints.
Para isso o módulo pdb é importado no ponto (na linha) que desejamos parar e colocar pdb.set_trace() --- no meio do código, incluindo o import. O script vai parar de rodar na linha POSTERIOR.

import pdb
pdb.set_trace()
ou __import__("pdb").set_trace()

A partir do python 3.7 existe a funcao 'breakpoint()', que substitui o que esta acima.
Existem outras implementacoes do pdb.

pip install ipdb (pdb + ipython) ## é quase tudo igual, com exceção do comando interact, que entra em um terminal do ipython, sem as limitações do terminal padrão do pdb. Tem como setar o ipdb como debugger padrão usando "export PYTHONBREAKPOINT=ipdb.set_trace". Aí sempre que a funcao breakpoint() for usada, vai entrar no ipdb.

Opções de debugging com ferramentas gráficas: pip install pudb e pip install winpdb (funciona melhor em ambientes windows)

VSCode tem ferramenta de debugging: Colocar ponto vermelho no canto esqurdo de uma linha (a barra / guia esquerda chama "gutter").
Executar com debugger Run > Start debugging. Debung console. Painel esquerdo aparecem as variáveis globais, locais e várias coisas.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 9 / 10 sistema de imports python
Video no youtube "reutilizado": https://youtu.be/_XszPRFHQQ4

Mecanismo de import provido pela import lib.
O python busca libs no sys path:

python -c "import sys; print(sys.path)"
	1. A string vazia (""), que é o primeiro item, representa o diretório atual. Se não está lá:
	2. O segundo intem é a Standard Library (vem com a instalação do python). Se não está nela:
	3. O terceiro item é o user path (cada usuário tem um). Se não está:
	4. O quarto item é o system path.
	
Se não estiver em nenhum deles, ele retorna um erro. Dá para incluir direitórios novos se for o caso, mas não é o recomendável.

Ambientes virtuais  evitam que haja conflitos entre bibliotecas do python. Uma cópia do python é criada em cada venv.
É uma boa prática criar um venv para cada projeto. Ambientes virtuais podem ser apagados sem afetar a instalação de outros venvs ou o python do sistema.
Para cada projeto e ambiente virtual, é bom ter um arquivo .txt: "requirements.txt", onde ficam as libs e recomendável ter as versões delas (pinar as dependências). Com a lista feita, usamos pip install -r requirements.txt.

Gestão de dependência pode ficar caótica. Exemplos:
	Conflito com bibliotecas do SO. Pacote dephell
	Conflito entre pacotes dentro da mesma venv.
	Problema de segurança (hackeamento, nesse caso exite a opcao pip install --require-hashes).

	Solucoes para ajudar nisso (padronizacao): PEP 517 e PEP 518
	Ferramentas pip install pip-tools (gera um hash de um pacote e e exporta em um arquivo txt com as versões, pacotes e hashes). Mas não segue as PEPs.

	Poetry : gestor de dependências que segue PEP 517 e PEP 518. Foi inspirado no cargo (gestor de pacotes do RUST).

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 10 Projeto: Criando repositório, organizando e configurando o VSCode
Repositório: https://github.com/ThiagoRBM/dundie-rewards/blob/main/README.md
Na hora de criar repositório, marcar a opção de criar .gitignore e escolher a opção python criar um gitignore com várias coisas úteis por padrão.
Epics = tarefas grande
Milestones (passos importantes), Issues (objetivos dentro das milestones)
TODO PROJETO QUE CRIAR É BOM TER UM AMBIENTE VIRUTAL.
python3 -m venv .venv ## dentro do repositório do projeto
source .venv/bin/activate ## ativa a venv
python -m site ## aparece o caminho para essa venv entre os outros
code . ## abre o vscode no diretorio, com as configuracoes padrao

code --user-data-dir .vscodelocal . ## cria um arquivo de configuração específico para o projeto no VSCode (como se fosse uma instalação do zero praticamente) E ABRE o vscode no diretorio atual

extensoes:
zone green
gitLens
python
pylance
sqlite

No VSCode, em um arquivo MArkDown: shift + ctrl + P abre o preview

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 11

Projeto: Criando a estrutura de pastas, build e install do projeto 

git checkout -b "nome" ## cria uma branch com o nome escolhido
git checkout -b "issue-10" ## criei uma branch com o nome da issue que estava mexendo

## quando der o push em uma branch, o que subir não vai para a branch mainova e não vai ter conflito.## dessa maneira o push vai para a aba "pull requests"

## para ver qual python está rodando: which python
## para ver os caminhos onde pacotes são buscado: import sys ; sys.path
## atarvés do sys.path, o python consegue importar arquivos .py qye estejam no mesmo diretório.
## isso acontece independente de existirem venvs ou não.
## cuidado com circular imports.
## "pacotes" sao pastas com modulos que dependem uns dos outros (e preferencialmente tem um arquivo "__init__.py).
## em projetos, nao se costuma chamar arquivos de sciprt e sim de modulos.
## em modulos nao e necessario ter o shebang no começo (com excecao de executaveis).
## um repositótio é a pasta principal onde ficam o ou os pacotes de um projeto
## (nela tem coisas como a README, licença e outras coisas que não são código)
## a pasta __pycache__ armazena as informações de import. Tem arquivos ".pyc"
## cache de compilação do python, ficam em bytecode
## em versões atuais do python, ele já consegue importar modulos de dentro de pacotes
## que estiverem no mesmo diretorio (repositorio) automaticamente. Em versoes
## mais antigas era necessario ter um arquivo __init__.py.
## Porém pode ser bom continuar tendo o arquivo porque permite mais customizações.
## Ele é um arquivo vazio, só com esse nome.

## o modulo de "entry point" para um programa python chama __main__.py
## ele faz com que um pacote seja transformado em um modulo executavel.
## o __init__.py inicializa o programa (e pode alterar alguns comportamentos e
## ter hacks) e o __main__.py é o arquivo principal.
## quando o programa for chamado, vai ser inicializado pelo init e ser executado
## pelo main.

## com o main é possível rodar no terminal:
python -m dundie
## se ele for deletado, não será

## além do main e init, é importante ter um arquivo de "build" que ajuda no empacotamente
## ele fica na raiz do REPOSITÓRIO (mesmo lugar do README) e chama setup.py
## O setup.py é transformado para outro formato e colocado no binário do python.
## nele ficam informações importantes para que o programa possa ser instalando.
## a ferramenta mais tracional é usando o setuptools.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 12 

## entry points de CLI

Issue #8. Atualmente o programa (que foi instalado) roda com o comando
python3 -m dundie, mas o objetivo agora é que ele rode apenas com "dundie". Executar ele direto sem especificar a linguagem e isso é feito com binário.
O padrão é que se use o mesmo nome do python3 -m dundie (usado depois do m) para chamar o programa.
No aquivo setup.py, existe o "entry_points", um dicionário com os nomes dos entrypoints e pacotes que fazem parte deles. Existem vários tipos de entrypoints. Chamar no CLI é um console scripts.
Depois de adicionar o entrypoint em setup.py, instalar de novo o programa: pip install -e . ; agora ele instala e coloca o entrypoint.  (fazer isso com a venv ativada)
Para verificar se o binário foi instalado, usar ls .venv/bin
cat .venv/bin/dundie ## o python gera um script para fazer ser possível chamar "dundie" no terminal. Para transformar em callable, adicionar funcao dentro do arquivo __main__.py. O padrão é usar o nome de main.
## caso se esqueça de voltar para a main de um branch no git, usar
## git stash antes de git checkout main. Ai as alteracoes ficam
## salvas em um arquivo temporario. Aí voltar para a main
git checkout main
## e pegar as alteracoes do arquivo temporario
git sstash pop

## para sincronizar quando o git do PC esta desatualizado em relacao ao site:
git fetch --all
## apos isso
git rebase origin/HEAD

if __name__ == "__main__":
    main() ## ao final da definicao da main reconhece quando o comando
    ## foi digitado chamando o python ou nao. É importante. Quando a funcao é chamada sem especificar o python, o nome será o nome da funcao e nao main. Quando é chamada com o python -m o nome é main.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 13 gestao de dependencias  makefile

dependencias: pacotes que nao vem com o python por padrao. Importante para que quem trabalhe com o projeto nao precise ficar instalando manualmente cada pacote.

a maneira oficial é colocar a lista de dependencias no setup.py, em install_requires na forma de lista (no extras_requires são dependências que podem ser instaladas caso a pessoa queira instalar, na forma de dicionario, por exemplo dependencias de teste e desenvolvimento).

pip install -e '.[dev]' ## para instalar as dependencias extras (nao obrigatorias), especificar dentro dos colchetes, as keys do dicionario.
(ou pip install -e .[dev] no bash). Especificar uma versão = "pinar".
Colocar os requirements no setup.py é o padrão mas tem como colocar também de outras formas, como em arquivos .txt. Isso é muito usado e funciona.Esses arquivos .txt são usados por outras ferramentas de checagem de dependências (como o dependabot do github). É possível criar no arquivo setup.py uma funcao que leia os arquivos .txt e os use, ao inves de ficar repetindo os nomes das dependências em vários arquivos. Nesse caso a instalação pode ser feita com:

pip install -r requirements.test.txt
pip install -r requirements.dev.txt

makefile é um arquivo na raiz do projeto (não é específico de python, surgiu com o C). Serve para criar arquivos. Ao rodar, arquivos são gerados, mas no python é usado para automatizar comandos.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 14 Doctests, Pytest e Decorators

A boa prática é que o __init__.py fique vazio o máximo possível.
__main__.py é o entrypoint, mas o código não precisa estar nele, já que tem como importar módulos.

A parte de CLI (que intercepta comandos e etc) pode ser colocada em outro arquivo (exemplo cli.py).

## ver onde o python procura modulos (relembrando) python -m site

## teste funcional ou de integracao imita os passos do usuario e o resultado obtido
## no teste unitario sao testadas as funcoes especificamente e uma a uma.## pytest é uma lib usada para escrever os testes.
## ela procura testes e os executa automaticamente (ao inves de precisarmos testar uma a uma manualmente).
## para que as funcoes sejam testaveis, precisam ter um return e é bom que possam ser rodadas isoladamente.

## doctest são testes "embutidos" na docstring, que podem ser rodados para verificar funcionamento da funcao. Tem um ">>>" na doctring, com um teste e um resultado esperado embaixo (ver pacote dundie). Abaixo, o pytest

## para usar o pytest: arquivos py que comecem com "load" e dentro deles, funcoes que comecem com "test".
## para rodar os testes: no diretório raiz, rodar "pytest"
## pytest -v ## para resultado verboso
## pytest -vv ## para resultado mais verboso
## pytest -vv -s ## para rodar com debuggers
## como os testes serão feitos várias vezes, é uma boa ideia colocar ele no Makefile
## pytest tem plugins bons, um deles é o pytest-watch (pip install pytest-watch)
## esse plugin faz com que para cada alteracao o pytest rode automaticamente. Dá para colocar o comando para rotar o pytest watch no makefile

## decorators alteram o comportamento de uma funcao alterando o minimo possivel o codigo (decorator não é exclusivo do python).
## decorators usam a possibilidade de funcoes serem de "primeira classe", ou seja, que possam ser passadas como argumento em outras funcoes. Decorator é uma funcao que é aplicada em outra funcao. "Uma funcao que internamente intercepta outra funcao e altera o comportamento dela".

def soma(a,b):
	return a + b

soma(1,2)

def dobra(f):
	def manipuladora(a,b):
		return f(a*2, b*2)
	return manipuladora

soma= sobra(soma) ## jeito original de usar
soma

@dobra ## jeito mais usado atualmente, com o "arroba" e a funcao modificadora em sima da original
def soma(a, b):
	return a + b

soma(1, 2) ## o codigo da funcao soma original nao foi modificado, mas a funcao dela foi. Ela pode ser usada em qualquer funcao que tenha os mesmos parametros.

@dobra ## jeito mais usado atualmente, com o "arroba" e a funcao modificadora em sima da original. Decorators podem ser acumulados um em cima do outro.
def mult(a, b):
	return a * b

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 15 Unit, integration, configuracao Pytest e CI com github actions

integration (ou functional) tests: imitam o usuario, em um programa de CLI, ele rodar o programa e espera a resposta. Se fosse site, ele "iria" ate o site e "clicaria" nos botoes.

Por convencao os testes unitarios (funcao a funcao) ficam em uma pasta chamada tests e os de integracao, em uma chamada "integration"

No integration test geralmente tem uma interface para executar, no caso de uma CLI, para rodar os comandos é necessário o shell do linux. Lib python subprocess.

from subprocess import check_output
check_output(["ls"]) ## roda o comando ls pelo python
check_output(["ls"]).decode("utf-8").split("\n") ## transformando de binário para texto e arrumando

check_output(["ls","-a"]).decode("utf-8").split("\n")

## para testar, da para usar o pytest com mais de uma pasta:
pytest -s -v tests integration  

## tem como congiruar o pytest (ver site da lib) com arquivos especiais.
E.g.: pytest.ini , pyproject.toml, setup.cfg
## pyproject.toml é hoje o formato provavelmente mais usado. Configura várias ferramentas em um único arquivo.
## tem como colocar "tags" em testes (testar so determinadas funcoes, so funcoes de alta, media ou baixa prioridade, teste específicos para diferentes sistemas operacionais e etc). As tags sao colocadas no arquivos conftest.py. O pytest tem hooks que sao usados para entender as tags.

pytest -s -m "high" ## filtrar pelas tags
pytest -s -m "unit and high" ## filtrar por duas tags
pytest -s -m "unit or medium"

## CI (ou Continuous Integration) do github é o github actions e o projeto vai ser configurado para que além dos testes locais (com make test e etc), so sejam feitos merge de pulls requests quando o github fizer testes e eles passem.
## Isso é configura através de arquivos. Criar pasta .github na raíz. Dentro dela, uma outra chamada workflows. Os arquivos (.yml) que estiverem lá dentro serão passos do CI. Cada arquivo yml é um passo da CI.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 17 boas praticas em testes, setup, teardown, parametrize e test reports

Lembrando. Rodar na pasta do dundie:
	pytest -s -m "unit" ## dcorator
	pytest -s -m "unit or medium" ## dcorator
	make test ## Makefile
	make watch ## Makefile

Boas práticas:
	1. testes não devem ter "side effects" (como criar arquivos) na pasta do projeto. Usando por exemplo o make watch, se o teste tiver side effects vai ficar dificil gerenciar. Para evitar side effects, uma das maneiras é colocar todos os side effects dos testes em uma pasta temporária (os.chdir("/tmp")). O problema é que será necessário ficar evitando conflitos. O pytest para resolver isso JÁ TEM um gerenciador de pastas de teste (fixture). Usando o decorator @pytest.fixture no arquivo conftest.py. Qualquer funcao com esse decorator vira uma fixture. Ela automatiza a preparação para os testes. As fixtures usam o yield no lugar do return, que armazena resultados da funcao em um gerador (iteravel).
	2. Quando falar de UNIT teste (testes de funcao), é bom ter um único assert em cada teste. 
	3. Para relatórios de testes em qualquer linguagem, não só python, o padrão Junit é muito usado. Tem como passar o que é impresso no terminal para um arquivo .xml. Esse relatório evitam que seja necessário ficar procurando os erros no CI do github, por exemplo.
	4. Para testes de integracao. Não focar apenas nos "happy paths", por exemplo ao invés de chamar a funcao com load, escrever errado ("loady").Tem biblioteca que ajudam a criar erros aleatorios, simulando erro de digitacao e etc. Teste caminhos positivos e os negativos (erros do usuario)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 18 qualidade de codigo, linters e auto formatacao

Além dos testes de qualidade unitários e de integração, ainda tem a "qualidade do código", que é interessante para quem desenvolve (mais bonito, mas fácil de ler e mais fácil de manter), para o time de maneira geral e para quem mexa ou trabalhe no código depois.

Padrões bem estabelecidos (PEP 8)
Ferramentas que ajudam a seguir os estilos padrões
pip install flake8==4.0.1 ## compara o que está escrito com as regras da PEP8. O flake8 não tem suporte ao pyproject.toml, então se instala o 
pip install pyproject-flake8. Como são usadas para teste E desenvolvimento, é boa prática colocar em requirements.test.txt e requirements.dev.txt
flake8 dundie ## varre toda a pasta e diz onde há erros. Dá para arrumar os erros apontados manualmente.

pflake8 dundie ## tem como rodar na pasta ou excluir pastas:
pflake8 --exclude=.venv,build ## da para colocar essa varredura do pflake8 no pyproject.toml

No Makefile, da pra dicionar target lint e rodar a verificação e é bom adicionar também no arquivo yml que roda no CI do github, ANTES de rodar os testes unitários e de integração. 

Com o make test, são feitas análises de run time. Com linters, será feita análise estática.
	
Tem como arrumar os erros encontrados pelo pflake8 com de forma automatica tambem.
Existem algumas ferramentas, como autopep8 e o black (essa ultima e muito usada). Black é "opinnionanted". Dá para colocar ele no Makefile e especificar algumas coisas no pyproject.toml, mas a customização dele é limitada.

Existem maneiras padrão para fazer import de biblitecas e para arrumar isso também tem uma lib.pip install isort
como tem o black, para rodar o isort temos que rodar como "profile" do black:
isort -profile-black --check --diff dundie tests integration ## checa
isort -profile-black dundie tests integration ## faz as alteracoes

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 19 boas ferramentas e libraries- click + rich + testing

Cuidado para não "reinventar coisas", como bibliotecas ou frameworks.
Em projetos "sérios", bibliotecas conhecidas já usadas pela comunidade e podem facilitar na hora de outras pessoas usarem seus códigos, por exemplo.
Escolher ferramentas está ligado com a qualidade do código / programa. Ferramentas muito usadas facilitam.
Lib argparser é uma ferramenta CLI que vem com o python, mas é limitada em alguns aspectos. Uma das mais usadas para CLI é a click (CLI = comand line interface).
Ela usa decorators, que são separados por grupos ("@click.group"). Essa ferramenta já cria automaticamente os helps:

dundie
dundie load --help

Além de ferramentas como click, que ajudam na criação de CLI,existem ferramentas que ajudam a formatar como as coisas aparecem no terminal (como tabelas). Uma delas é a rich, que integra com o click. A rich_click é um plugin para o rich.

As ferramentas rich e click tem ferramentas para testes.
Não precisa usar com o subprocess.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 20 TDD e Regex

TDD = Test Driven Development. Antes de criar as funcoes para resolver problemas, primeiro se fazem testes.
É interessante para o TDD deixar o pywatch rodando (make watch).

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aaula 21 Criando um sistema de banco de dados com JSON + mocking patch

## para mexer com json no python
import json
json.loads(open("assets.database.json").read) ## transforma o arquivo JSON em dicionario python


#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 22 testes com pytest-forked e implementando as funcionalidades de report
e adicao de pontos no projeto

quando se trabalha com arquivos, pode acontecer de um teste interferir no outro
(race condition). Algumas bibliotecas ajudam com isso, como a pytest-forked.
### branch 1

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 23 Documentacao e mkdocs

flake8-docstrings ajuda a conferir se tem documentacao em todas as funcoes e se elas segum as boas práticas. Além das funcões, é recomendado que todo MÓDULO tenha uma docstring também (lembrando: módulo é arquivo .py de um repositório). Esse pacote não gera as docstrings automaticamente (como por exemplo o blake procura fazer).

É recomendado além do README.md, ter um arquivo CONTRIBUTING.md na raíz do projeto.

Outra documentação que é interessante ter é a sobre o uso do programa. Uma ferramenta muito boa e usada é o mkdocs. Mkdocs usa markdown também (ecistem outras ferramentas, como sphinx, mas essa não usa markdown.

mkdocs new
mkdocs serve # cria pasta onde estará o site, em arquivos .md.
mkdocs build --clean # após fazer o site, gera esse site em uma pasta site (arquivos css, fontes, pasta para cada página e etc). Essa pasta que é "deployada" em algum servidor, como o githubpages (pages.github.com), outra opção é o netlifly (tem uma versão free).

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 24 Empacotamento, semantic version e distribuicao com twine

semantic versioning: semver.org
Major.Minor.Patch
X.Y.Z
Primeira versão (release) de qualquer programa é a 0.1.0
Primeiro dígito: "MAJOR" e só muda quando houver alterações muito grandes. Que possam quebrar o uso. Por exemplo mudar nome de funcao, atributos de funcao e etc. É importante alterar o MAJOR caso a alteração seja grande, para não quebrar compatibilidade.
Motivos de marketing também podem justificar alterações no Major (novo logo e etc).

Segundo dígito: MINOR, houve alguma alteração, como inclusão de funcionalidade, mas NÃO EXISTE quebra compatibilidade.

Terceiro dígito: PATCH, correção de bugs.

testpypi.org: site para TESTE de pacotes
cria token
exporta o twine para o ambiente
(export TWINE_PASSWORD=token gerado) ## nao tem problema expor esse token porque é para testes apenas
exporta o username
(export TWINE_USERNAME=__token__)
env | grep TWINE ## variaveis exportadas
## com essas duas variáveis, a lib consegue logar e enviar o pacote.

Existem algumas formas de empacotar o projeto, uma delas é o formato .egg(um arquivo .tar e a pasta do projeto vai para lá). O formato mais atual é o wheel, com uma distribuição binária (deve estar nos requirements de dev).
Para fazer a build:
python setup.py sdist bdist_wheel (colocar no Makefile)

## tem como fazer testes do build, para ver se funcionou direito.
## por padrão só arquivos .py são incluídos e isso pode dar problema nos testes.
## para isso o arquivo MANIFEST.in é criado na raíz

Além da pasta build, uma pasta dist é gerada. A partir dela que o repositório vai ser publicado. Tem um arquivo .whl e um .tar.gz.
Isso é feito com o twine.

twine upload --repository testpypi dist/*
# nao podem ter repositórios com nomes iguais
ficou em: https://test.pypi.org/project/trbm-dundie/0.1.0/

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 25 system design

inversao de controle: usuario controle uma API (alto nivel) e isso chama algo em nivel mais baixo. De preferencia, uma camada nao esta acoplada a camada anterior (ou seja, camada core por exemplo nao importa coisas que estao na camada de CLI; "o core nem sabe que o cli existe").
Camadas comuns: CLI, Core (regra de negócios, decisões, etc), Dados (connect, commit, etc), Serviços (e.g. envio de mails).
No caso de serviços web, a camada de integração pode ser uma API ao invés da CLI. Mas o "core" (backend) seria o mesmo do CLI. Mesmas funcoes acessadas por outra via. O desacoplamento ajuda nisso também. Existem vários tipos de arquiteturas.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 26 Paradigmas de programacao

Em python tudo é objeto.
Tem como fazer programas sem usar Orientação a Objetos, mas ela é poderosa e ajuda o programa a ficar melhor.

Paradigmas de programação no python.

1. Procedural (imperativo). Coisas acontecem passo a passo. É um dos mais usados e é o que é usado em linguagem de máquinas, com mais baixo nível.2. Funcional (Kaskell, LISP).
3. Declarativo (SQL).
4. Orientado a Objetos estritos (java e c#). Em java mesmo para criar função, é usada a Orientação a Objetos; é necessário criar uma classe primeira.

No python podemos misturar paradigmas. Criacao de funcoes é declarativo.

Em programação funcional geralmente vale a lazy evaluation: avaliada somente quando o objeto é consumido. Por exemplo, declarando o resultado da evaluation a um novo objeto ou passando para um iterador.

Em programação funcional se busca ter funções mais puras possíveis, ou seja, não produz side effects (não altera o valor do objeto de entrada). A intenção é criar novos objetos ao invés de modificar um existente.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 27 Introducao a orientacao a objetos no python

(criado pela primeira vez na linguagem Small Talk)
Componentes da orientacao a objetos:
# classe 'class' define o tipo / categoria do objeto (materialdeEscritorio, Eletronico, relógio). Uma categoria ampla.
# objetos, instâncias criadas a partir da classe (caneta, celular, tamarindo)
# atributos, valores definidos nas classes e nos objetos. Os objetos da classe terão todos os mesmos atributos.
# método, função definida no escopo da classe. Por baixo dos panos, uma classe é um dicionário.

class Person:
	"""Represents a person."""
	company_name = "Dunder Mifflin"  # atributo da classe
	work_addres = "Rua Stanton, Pensilvania"  # atributo da classe
	

jim= Person()  # instancia da classe Person
dwight= Person()
pam= Person()

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 28 inicializacao de objetos

Em python objetos sao mutaveis por padrao (tem tecnicas para transformar em imutavel).
Filosofia "consent adults": somos adultos e sabemos o que fazemos.
Atributos de classe imutaveis nao sao alterados por instancias.
Atributos de classe MUTAVEIS (como listas) são alterados por instancias. Evitar atribuir valor mutável como atributo de classe.

Python data model. classe.__prepare__(); classe.__new__() (construtor), muito baixo nível, não é comum ser usado. Usamos o classe.__init__
Atributos mutáveis ficam no init. Atributos imutáveis (str, int, float) podem ficar fora.

Em métodos de classes, SEMPRE o primeiro argumento será a própria instância (injeção de dependência).

A convenção é em toda vez que um método em uma classe, chamar de self.


#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 29 4 pilares da OO abstração, herança, polimorfismo, encapsulamento

1. Abstração. Capacidade de descrever objetos do mundo real e abstrair implementação. Coisas como tipos (str, int, etc), a implementação interna são abstraidos. Exemplo, classe fruta (não especifica qual fruta). Super classe. De preferência classes abstratas NÃO TEM instâncias (ou seja, objetos de preferência não são criados a partir delas).

2. Herança. Criar uma classe material a partir de uma abstrata. Exemplo: tamarindo (uma fruta específica). Subclasse, classe derivada. Uma classe pode não ter nada dentro, com tudo sendo herdade de classes anteriores.
from abc import ABC # ABC de Abstract Base Classe.

class Fruit(ABC):
	kingdom= "Planta"

Herança múltipla. Usar mais de uma classe como base e herdar atributos delas. Pode ser útil em modelos de desenvolvimento como "mixins".


3. Polimorfismo. Ligado a palavra "protocolo".
"valor" in objeto  # objeto pode ser qualquer tipo que implementa `__contains__` . Indenpendente da forma de objeto, é possível aplicar operações nele desde que esteja de acordo com algum protocolo.
No python o polimorfismo está baseada no Duck Typing: Se o objeto anda como um pato, parece um pato, faz quack como um pato, então, é um pato. A maioria das linguagens dinâmicas tem isso. Que é criar funções e que ela não se importe caso o objeto que a recebe tenha o protocolo.
Usando *args na funcao, também é um polimorfismo.

4. Encapsulamento. Capacidade de um objeto esconder sua implementação interna e expor apenas o que for conveninente. Tem estratégias para isso. Uma delas é a "convenção de nomes".
Atributo iniciando com um anderline. Ele só pode ser acessado dentro da classe.
Com DOIS underlines no começo, ele passa a ser privado e nem aparece com o dir(classe).
Essa forma por convenção de nomenclatura não é tão usada (e os atributos privados praticamente não se usa).

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 30 encapsulamento com propriedades

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

aula 31 python data model e protocolos

No python os protocolos são proeminentes na Orientação a Objetos. Dá pra falar que no python existe a "orientação a protocolos".
Python usa protocolo para tudo.
Python tem tipagem forte. Antes de fazer operação e verifica se os protocolos dos objetos são compatíveis.
Protocolos definem o que é possíve fazer com um objeto.
Classes criadas vazia já vem por padrão com vários protocolos. Esses protocolos são herdados da classe object. (dir(object))


#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 32 python moderno, type annotations e dataclasses

Python moderno permite o uso de type annotations (garantia de tipos). A partir de python 3.5, mas estabilizado em versões > 3.8. Modulo typing. O python NÃO FORÇA as type annotations
Em variáveis "estáticas" raramente é necessário colocar anotação de tipos. Mas na definição de funções (assinatura), classes e métodos é bem interessante que seja feito. Porque não dá para saber se quem vai usar a função ou classe vai passar os argumentos certos. O código NÃO DEIXA de rodar se o tipo passado está errado. Mas as assinaturas de função indicam qual é o correto. A ferramenta mypy analisa se os tipos especificados estão sendo seguidos.Funciona como se fosse um linter: rodando ele no script que se deseja.

## para rodar o arquivo sempre que salvar: ls type_annotations.py | entr -c -s "mypy type_annotations.py && ./type_annotations.py"

## outras ferramentas ajudam a seguir as type annotations, uma é a beartype, que funciona com decorators. Em tempo de execução ela verifica os tipos.

## TYPE ALIAS. Quando a tipagem começar a ficar complexa, é possível criar uma estrutura (diferente de classe) de tipo.

## DATACLASS é um decorator que substitui o método __init__ para criar a classe.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 33 dataclasses abstrata, enums, field e super()

Apesar de não ser recomendável que se crie classes abstratas, o python não impede por padrão que isso seja feito.
Para impedir a criação de classes abstratas, existem algumas formas. Uma delas é importar o método abstrato (from abc import abstractmethod). É um decorator que fica em algum método dentro da classe abstrata.

Enum é Enumeração / Enumerator. É uma classe e seus atributos representam estados.
É bem útil por exemplo na hora de especificar categorias, para evitar erros de digiação do usuário.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 34	Structural pattern matching, python 3.10 e jogo da tartaruga

pattern match usando lib turtle (que vem com o python). 
pattern match é comum em linguagens funcionais. Está no PEP 636. Disponível a partir do python 3.10. No python o pattern match é ESTRUTURAL, ou seja, usa a estrutura dos objetos e não os valores.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 35 Modelagem de dados com dataclass e Pydantic

Serialização é quando a partir de uma instância de classe (objeto), criamos um arquivo em texto (como json / json.dumps).
Desserialização é criar uma classe (ou objeto) a partir de um arquivo texto, como json (json.loads).
A lib pydantic resovle problemas de serialização e desserialização. Ele é usado no lugar da lib dataclass.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 36 prova de conceito de ORM

Object Relational Mapping (aula sem código)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 37 SQL e SQLite

Structured Query Language.
SQL é um banco de dados relacional. Estruturado com algumas característica:
	1. Ser uma tabela (tipo excel), divididas em linhas e colunas
	2. Em bancos como SQL, MySQL, os dados são armazenados em formato binário. Fica mais rápido e menor
	3. Na hora de visualizar, os dados binários são abstraídos (clients que se comunicam com a estrutura binária; precisa do client)
	4. No banco de dados existem metadados, que não existem em bancos de dados como o excel. Eles são colocados por exemplo como índices e chaves (como chave primária; a marcação de qual é essa coluna é um metadado). Constraints definir critérios como preenchimento obrigatório, validações e etc

A linguagem para definir características de tabelas (colunas, tipos de colunas, regras e tudo o mais) é usada a linguagem SQL, que é declarativa.
Existem categorias de comandos SQL (equivalente aos tipos de comandos do python: assignment, expressions, statements):
	1. DDL, Data Definition Language manipula estrutura de objetos (apaga, adiciona tabela)
	2. DML, Data Manipulation Language (inserir informação, deletar informação, chamar função)
	3. TCL, Transaction Control Langugae alterar nomes ou informações em várias tabelas e faz um commit dizendo que as alterações estão válidas (corretas), para ser possível voltar atrás caso aconteça algum erro
	4. DQL, Data Query Language (instrução select é a única da categoria)
	5. DCL, Data Control Language, controla quem tem acesso ao banco de dados.

# ferramenta que ajuda a modelar banco de dados app.dbdesigner.net, roda no navegador
# apesar de ser possível escrever queries e manipular os bancos de dados de forma "crua"
# existem libs que facilitam isso, usando ORM, que ajudam as classes criadas no python
# já tenham métodos de consulta SQL embutidos e ser possível consultar as informações direto pelas classes

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 38 SQL alchemy

SQL alchemy é um ORM: Object Relational Mapper.
Ele mapeia classes para bancos de dados. Com ele não precisa ficar escrevendo os comandos no formato do SQL.

pip install sqlalchemy

Ele se conecta a postgres, oracle, mysql e outros bancos relacionais.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 39 SQL model

SQL alchemy é boa, mas é antiga e não está totalmente adaptada ao python moderno.
Por exemplo, não aceita direito type annotations. Uma delas é o SQL model.
É uma abstração em cima do sql alchemy.
Ela foi feita pelo criador do fast API, especificamente para ser usada com ele,
mas pode ser usada sem ele também.


#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 40

Convertendo software legado para SQL.
branch dat7p06

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 41 database migrations e acesso a API rest

branch day7p07

migrantions
lib alembic  # como se fosse um git para banco de dado sqlite
alembic init migrations  # cria uma pasta na raíz do projeto
no arquivo alembic.ini, alterar o endereço de sqlalchemy.url (~ linha 58)pra o endereço do banco de dados de interesse

lib httpx é mais atual que a requests, mas os métodos e etc são iguais.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 42

Finalização do Projeto e dsafios.

4 issues para resolver:  https://github.com/rochacbruno/dundie-rewards/milestone/4

Se for funcionário, não pode usar o comando add e o show mostra só os próprios pontos.
Se for gerente, pode usar add e ver pontos de pessoas do mesmo departamento (.where).
"dsafio alunos"

SEQUENCIA DE COMANDOS PARA RESOLVER CONFLITOS:

https://stackoverflow.com/questions/5423517/how-do-i-push-a-local-git-branch-to-master-branch-in-the-remote (substituir "develop" pela branch que esta dando conflito)

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 43 e 44

Demonstracoes de frameworks para GUI, CLI, API introducao

Demonstração desenvolvimento aplicativos Desktop. Shell de execução é o ambiente gráfico do sistema operacional (antes o shell era o terminal).
Usando a biblioteca TK (tkinter vem com o python), qur conversa com a linguagem TCL.
Para aplicativos (web, jogos, GUI), é importante ter um loop de eventos. Aplicações que precisam interagir com o usuário.

Além da biblioteca tkinter (que abstrai a TCL), a pysimplegui abstrai o tkinter. Ela também pode falar com a QT (outra biblioteca para GUI) e com a web.

Outra biblioteca, mais moderna. Chama kivy.
É orientada a objetos, ao contrário das outras duas. É mais pesada. Pode ser usado para criar aplicativos mobile.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 45 Game 2D

Usando biblioteca pygame.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 46 TUI (terminal user interface)

CLI roda uma vez, se quiser rodar de novo, precisamos rodar o programa de novo.
Na TUI, o usuário pode usar vários comandos SEM precisar rodar múltiplas vezes.

Exemplo da aula: jogo semelhante ao TERMOOO (usando um dicionários de palavras brasileiras do site da USP), usando lib rich
Segundo exemplo, usando biblioteca textual. É uma biblioteca que faz uma abstração em cima da rich e implementa o paradigma de programação "orientada a eventos" (aplicativos reativos). Usa o método async (asyn def on_load). Sendo assíncrono, permite que mais de um evento aconteça ao mesmo tempo. Existem outras além da textual.

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################

Aula 47 

Web HTML

Subir um servidor com python no diretório atual (apenas para teste, não é bom para produção): python -m http.server --directory .
No momento em que um site "sobe", não é mais python que está sendo usado. O navegador só sabe fala JS, HTML e CSS.
Python serve para GERAR as coisas e o HTML que vai para o site (faz o backend).
Um dos frameworks python para backend é o flask (pip install flask)
Convenção: chamar aplicações flask como "app.py".

#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
#######################################################################
